<template>
  <div class="seat-map-container">
    <!-- 自习室选择 -->
    <el-card class="room-select-card">
      <div class="room-select">
        <el-tabs v-model="activeRoom" @tab-click="handleRoomChange">
          <el-tab-pane 
            v-for="room in studyRooms" 
            :key="room.id" 
            :label="room.name" 
            :name="String(room.id)">
          </el-tab-pane>
        </el-tabs>
        
        <!-- 时间段选择 -->
        <div class="time-select">
          <el-date-picker
            v-model="selectedDate"
            type="date"
            placeholder="选择日期"
            :disabled-date="disabledDate"
            @change="handleDateChange">
          </el-date-picker>
          
          <div class="time-range">
            <!-- <el-time-select
              v-model="startTime"
              class="time-picker"
              placeholder="开始时间"
              :step="60"
              :start="'08:00'"
              :end="'22:00'"
              @change="handleTimeChange">
            </el-time-select> -->
            <span class="time-separator">至</span>
            <!-- <el-time-select
              v-model="endTime"
              class="time-picker"
              placeholder="结束时间"
              :step="60"
              :start="'08:00'"
              :end="'22:00'"
              :disabled="!startTime"
              @change="handleTimeChange">
            </el-time-select> -->
          </div>
        </div>
        
        <!-- 区域选择 -->
        <div class="zone-select">
          <el-radio-group v-model="selectedZone" @change="handleZoneChange">
            <el-radio-button label="all">全部区域</el-radio-button>
            <el-radio-button
              v-for="zone in currentRoomZones"
              :key="zone.id"
              :label="zone.id">
              {{ zone.name }}
            </el-radio-button>
          </el-radio-group>
        </div>
        
        <!-- 座位状态指示 -->
        <div class="seat-status-legend">
          <div class="status-item">
            <div class="status-indicator available"></div>
            <span>可预约</span>
          </div>
          <div class="status-item">
            <div class="status-indicator occupied"></div>
            <span>已占用</span>
          </div>
          <div class="status-item">
            <div class="status-indicator maintenance"></div>
            <span>维修中</span>
          </div>
          <div class="status-item">
            <div class="status-indicator selected"></div>
            <span>已选择</span>
          </div>
        </div>
      </div>
    </el-card>
    
    <!-- 座位地图 -->
    <el-card class="seat-map-card">
      <template #header>
        <div class="seat-map-header">
          <h3>{{ currentRoom?.name || '选择自习室' }}</h3>
          <div class="seat-count">
            <span>空闲座位: {{ availableSeatsCount }} / {{ totalSeatsCount }}</span>
          </div>
        </div>
      </template>
      
      <div class="seat-map">
        <!-- 网格布局的座位图 -->
        <div class="seat-grid" :style="{ gridTemplateColumns: `repeat(${currentRoom?.columns || 10}, 1fr)` }">
          <div 
            v-for="seat in filteredSeats"
            :key="seat.id" 
            class="seat-item"
            :class="{
              'available': seat.status === 'available',
              'occupied': seat.status === 'occupied',
              'maintenance': seat.status === 'maintenance',
              'selected': selectedSeat && selectedSeat.id === seat.id
            }"
            @click="selectSeat(seat)">
            <div class="seat-number">{{ seat.number }}</div>
            <div class="seat-icons">
              <el-tooltip content="电源插座" placement="top" v-if="seat.hasSocket">
                 <el-icon><Cpu /></el-icon>
              </el-tooltip>
              <el-tooltip content="靠窗" placement="top" v-if="seat.isWindow">
                 <el-icon><Sunny /></el-icon>
              </el-tooltip>
               <el-tooltip content="四人桌" placement="top" v-if="seat.isTable">
                 <el-icon><Grid /></el-icon>
              </el-tooltip>
            </div>
          </div>
        </div>
      </div>
    </el-card>
    
    <!-- 座位预约表单 -->
    <el-card v-if="selectedSeat" class="reservation-card">
      <template #header>
        <div class="reservation-header">
          <h3>预约信息</h3>
        </div>
      </template>
      
      <el-form :model="reservationForm" :rules="reservationRules" ref="reservationFormRef" label-width="100px">
        <el-form-item label="自习室">
          <el-input v-model="currentRoom.name" disabled></el-input>
        </el-form-item>
        
        <el-form-item label="座位号">
          <el-input v-model="selectedSeat.number" disabled></el-input>
        </el-form-item>
        
        <el-form-item label="座位类型">
          <el-tag v-if="selectedSeat.isWindow" type="success" effect="plain" class="seat-tag">靠窗</el-tag>
          <el-tag v-if="selectedSeat.hasSocket" type="primary" effect="plain" class="seat-tag">电源插座</el-tag>
          <el-tag v-if="selectedSeat.isTable" type="warning" effect="plain" class="seat-tag">四人桌</el-tag>
        </el-form-item>
        
        <el-form-item label="预约日期">
          <el-input v-model="formattedDate" disabled></el-input>
        </el-form-item>
        
        <el-form-item label="预约时段">
          <el-input v-model="formattedTimeRange" disabled></el-input>
        </el-form-item>
        
        <el-form-item label="备注" prop="remark">
          <el-input v-model="reservationForm.remark" type="textarea" :rows="2" placeholder="可选填"></el-input>
        </el-form-item>
        
        <el-form-item>
          <el-button type="primary" @click="submitReservation" :loading="submitting">提交预约</el-button>
          <el-button @click="cancelSelection">取消选择</el-button>
        </el-form-item>
      </el-form>
    </el-card>
    
    <!-- 预约成功对话框 -->
    <el-dialog
      title="预约成功"
      v-model="reservationSuccess"
      width="400px"
      center>
      <div class="success-content">
        <el-icon class="success-icon"><SuccessFilled /></el-icon>
        <h3>预约成功!</h3>
        <p>自习室: {{ currentRoom?.name }}</p>
        <p>座位号: {{ selectedSeat?.number }}</p>
        <p>时间: {{ formattedDate }} {{ formattedTimeRange }}</p>
        <div class="qrcode-container">
          <div class="qrcode">
            <!-- 预约二维码 -->
            <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=demo-reservation" alt="预约二维码" />
          </div>
          <p class="qrcode-tip">请在预约时间前30分钟内到达并使用此二维码签到</p>
        </div>
      </div>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="reservationSuccess = false">关闭</el-button>
          <el-button type="primary" @click="goToMyReservations">查看我的预约</el-button>
        </span>
      </template>
    </el-dialog>
  </div>
</template>

<script>
import { Cpu, Sunny, Grid, SuccessFilled } from '@element-plus/icons-vue'

export default {
  name: 'SeatMap',
  components: {
    Cpu,
    Sunny,
    Grid,
    SuccessFilled
  },
  data() {
    return {
      // 自习室数据
      studyRooms: [
        {
          id: 1,
          name: '一号自习室（静音区）',
          columns: 10,
          zones: [
            { id: 'A', name: 'A区（靠窗）' },
            { id: 'B', name: 'B区（中间）' },
            { id: 'C', name: 'C区（电源）' }
          ]
        },
        {
          id: 2,
          name: '二号自习室（讨论区）',
          columns: 8,
          zones: [
            { id: 'D', name: 'D区（靠窗）' },
            { id: 'E', name: 'E区（中间）' },
            { id: 'F', name: 'F区（电源）' }
          ]
        },
        {
          id: 3,
          name: '三号自习室（电源区）',
          columns: 6,
          zones: [
            { id: 'G', name: 'G区（靠窗）' },
            { id: 'H', name: 'H区（中间）' }
          ]
        }
      ],
      
      // 座位数据（模拟）
      seats: [],
      
      // 当前选择的自习室ID
      activeRoom: '1',
      
      // 当前选择的区域
      selectedZone: 'all',
      
      // 当前选择的日期和时间
      selectedDate: new Date(),
      startTime: "",
      endTime: "",
      
      // 当前选择的座位
      selectedSeat: null,
      
      // 预约表单
      reservationForm: {
        remark: ''
      },
      
      // 表单验证规则
      reservationRules: {
        remark: [
          { max: 200, message: '备注不能超过200个字符', trigger: 'blur' }
        ]
      },
      
      // 预约提交状态
      submitting: false,
      
      // 预约成功弹窗
      reservationSuccess: false
    };
  },
  computed: {
    // 当前自习室信息
    currentRoom() {
      return this.studyRooms.find(room => room.id === parseInt(this.activeRoom)) || null;
    },
    
    // 当前自习室区域
    currentRoomZones() {
      return this.currentRoom?.zones || [];
    },
    
    // 过滤后的座位（当前区域）
    filteredSeats() {
      if (!this.seats.length) return [];
      
      return this.seats.filter(seat => {
        // 过滤区域
        if (this.selectedZone !== 'all' && seat.zone !== this.selectedZone) {
          return false;
        }
        
        // 其他过滤条件（如果有）
        return true;
      });
    },
    
    // 可用座位数量
    availableSeatsCount() {
      return this.filteredSeats.filter(seat => seat.status === 'available').length;
    },
    
    // 总座位数量
    totalSeatsCount() {
      return this.filteredSeats.length;
    },
    
    // 格式化日期
    formattedDate() {
      if (!this.selectedDate) return '';
      
      const date = new Date(this.selectedDate);
      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
    },
    
    // 格式化时间范围
    formattedTimeRange() {
      if (!this.startTime || !this.endTime) return '';
      
      return `${this.startTime} - ${this.endTime}`;
    }
  },
  methods: {
    // 处理自习室切换
    handleRoomChange() {
      this.selectedSeat = null;
      this.selectedZone = 'all';
      this.loadSeats();
    },
    
    // 处理区域切换
    handleZoneChange() {
      this.selectedSeat = null;
    },
    
    // 处理日期变化
    handleDateChange() {
      this.selectedSeat = null;
      this.loadSeats();
    },
    
    // 处理时间变化
    handleTimeChange() {
      if (this.startTime && this.endTime) {
        this.selectedSeat = null;
        this.loadSeats();
      }
    },
    
    // 禁用日期（过去的日期）
    disabledDate(date) {
      return date < new Date(new Date().setHours(0, 0, 0, 0));
    },
    
    // 加载座位数据
    loadSeats() {
      // 模拟API请求
      // 实际项目中应该从后端获取，这里使用模拟数据
      
      setTimeout(() => {
        // 生成模拟座位数据
        const generateSeats = (roomId, zoneIds) => {
          const seats = [];
          const seatCount = roomId === 1 ? 80 : (roomId === 2 ? 60 : 40);
          
          for (let i = 1; i <= seatCount; i++) {
            const zoneId = zoneIds[Math.floor(Math.random() * zoneIds.length)];
            const seatNumber = `${zoneId}${String(i).padStart(2, '0')}`;
            
            // 随机状态，80%可用，20%已占用
            const statusRandom = Math.random();
            let status = 'available';
            
            if (statusRandom > 0.8) {
              status = 'occupied';
            } else if (statusRandom > 0.75) {
              status = 'maintenance';
            }
            
            seats.push({
              id: `${roomId}-${seatNumber}`,
              number: seatNumber,
              roomId,
              zone: zoneId,
              status,
              hasSocket: Math.random() > 0.5,
              isWindow: zoneId === 'A' || zoneId === 'D' || zoneId === 'G',
              isTable: Math.random() > 0.8
            });
          }
          
          return seats;
        };
        
        const roomId = parseInt(this.activeRoom);
        const zoneIds = this.currentRoom.zones.map(zone => zone.id);
        this.seats = generateSeats(roomId, zoneIds);
        
      }, 500);
    },
    
    // 选择座位
    selectSeat(seat) {
      if (seat.status !== 'available') {
        // 如果座位不可用，提示用户
        if (seat.status === 'occupied') {
          this.$message.warning('该座位已被预约');
        } else if (seat.status === 'maintenance') {
          this.$message.warning('该座位正在维修中');
        }
        return;
      }
      
      // 如果未选择时间段，提示用户
      if (!this.startTime || !this.endTime) {
        this.$message.warning('请先选择预约时间段');
        return;
      }
      
      this.selectedSeat = seat;
    },
    
    // 取消选择
    cancelSelection() {
      this.selectedSeat = null;
      this.reservationForm.remark = '';
    },
    
    // 提交预约
    submitReservation() {
      if (!this.selectedSeat) {
        this.$message.warning('请先选择座位');
        return;
      }
      
      if (!this.startTime || !this.endTime) {
        this.$message.warning('请选择预约时间段');
        return;
      }
      
      this.$refs.reservationFormRef.validate(valid => {
        if (!valid) return;
        
        this.submitting = true;
        
        // 模拟预约API请求
        setTimeout(() => {
          this.submitting = false;
          this.reservationSuccess = true;
          
          // 预约成功后，清空选择
          this.selectedSeat = null;
          this.reservationForm.remark = '';
        }, 1000);
      });
    },
    
    // 前往我的预约页面
    goToMyReservations() {
      this.reservationSuccess = false;
      this.$router.push('/student/my-reservations');
    }
  },
  mounted() {
    // 从URL获取自习室ID参数
    const { room } = this.$route.query;
    if (room && this.studyRooms.some(r => r.id === parseInt(room))) {
      this.activeRoom = String(room);
    }
    
    // 初始加载座位数据
    this.loadSeats();
  }
};
</script>

<style scoped>
.seat-map-container {
  padding-bottom: 20px;
}

.room-select-card {
  margin-bottom: 20px;
}

.time-select {
  display: flex;
  align-items: center;
  margin: 20px 0;
  justify-content: space-between;
}

.time-range {
  display: flex;
  align-items: center;
}

.time-picker {
  width: 130px;
}

.time-separator {
  margin: 0 10px;
}

.zone-select {
  margin-bottom: 20px;
}

.seat-status-legend {
  display: flex;
  justify-content: flex-start;
  margin: 20px 0;
}

.status-item {
  display: flex;
  align-items: center;
  margin-right: 20px;
}

.status-indicator {
  width: 20px;
  height: 20px;
  border-radius: 3px;
  margin-right: 5px;
}

.status-indicator.available {
  background-color: #67C23A;
}

.status-indicator.occupied {
  background-color: #F56C6C;
}

.status-indicator.maintenance {
  background-color: #909399;
}

.status-indicator.selected {
  background-color: #409EFF;
}

.seat-map-card {
  margin-bottom: 20px;
}

.seat-map-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.seat-grid {
  display: grid;
  gap: 10px;
  padding: 20px;
}

.seat-item {
  position: relative;
  height: 60px;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all 0.3s;
}

.seat-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
}

.seat-item.available {
  background-color: #67C23A;
  color: white;
}

.seat-item.occupied {
  background-color: #F56C6C;
  color: white;
  cursor: not-allowed;
}

.seat-item.maintenance {
  background-color: #909399;
  color: white;
  cursor: not-allowed;
}

.seat-item.selected {
  background-color: #409EFF;
  color: white;
  font-weight: bold;
}

.seat-number {
  font-size: 14px;
  font-weight: bold;
}

.seat-icons {
  display: flex;
  justify-content: center;
  margin-top: 5px;
}

.seat-icons i {
  margin: 0 2px;
  font-size: 12px;
}

.reservation-card {
  margin-bottom: 20px;
}

.seat-tag {
  margin-right: 5px;
}

.success-content {
  text-align: center;
  padding: 20px 0;
}

.success-icon {
  font-size: 60px;
  color: #67C23A;
  margin-bottom: 20px;
}

.qrcode-container {
  margin-top: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.qrcode {
  max-width: 150px;
  margin-bottom: 10px;
}

.qrcode img {
  width: 100%;
}

.qrcode-tip {
  color: #E6A23C;
  font-size: 12px;
}
</style> 