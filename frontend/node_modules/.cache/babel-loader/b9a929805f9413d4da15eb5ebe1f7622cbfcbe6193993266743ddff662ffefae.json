{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { nextTick } from 'vue';\nimport Node from './node.mjs';\nimport { getNodeKey } from './util.mjs';\nimport { hasOwn, isObject } from '@vue/shared';\nimport { isPropAbsent } from '../../../../utils/types.mjs';\nvar TreeStore = /*#__PURE__*/function () {\n  function TreeStore(options) {\n    _classCallCheck(this, TreeStore);\n    this.currentNode = null;\n    this.currentNodeKey = null;\n    for (var option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n    this.nodesMap = {};\n  }\n  return _createClass(TreeStore, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n      this.root = new Node({\n        data: this.data,\n        store: this\n      });\n      this.root.initialize();\n      if (this.lazy && this.load) {\n        var loadFn = this.load;\n        loadFn(this.root, function (data) {\n          _this.root.doCreateChildren(data);\n          _this._initDefaultCheckedNodes();\n        });\n      } else {\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      var filterNodeMethod = this.filterNodeMethod;\n      var lazy = this.lazy;\n      var _traverse = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(node) {\n          var childNodes, _iterator, _step, _step$value, index, child, allHidden;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                childNodes = node.root ? node.root.childNodes : node.childNodes;\n                _iterator = _createForOfIteratorHelper(childNodes.entries());\n                _context.prev = 2;\n                _iterator.s();\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 13;\n                  break;\n                }\n                _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], child = _step$value[1];\n                child.visible = filterNodeMethod.call(child, value, child.data, child);\n                if (!(index % 80 === 0 && index > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n                _context.next = 10;\n                return nextTick();\n              case 10:\n                _traverse(child);\n              case 11:\n                _context.next = 4;\n                break;\n              case 13:\n                _context.next = 18;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](2);\n                _iterator.e(_context.t0);\n              case 18:\n                _context.prev = 18;\n                _iterator.f();\n                return _context.finish(18);\n              case 21:\n                if (!node.visible && childNodes.length) {\n                  allHidden = true;\n                  allHidden = !childNodes.some(function (child) {\n                    return child.visible;\n                  });\n                  if (node.root) {\n                    node.root.visible = allHidden === false;\n                  } else {\n                    node.visible = allHidden === false;\n                  }\n                }\n                if (value) {\n                  _context.next = 24;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 24:\n                if (node.visible && !node.isLeaf) {\n                  if (!lazy || node.loaded) {\n                    node.expand();\n                  }\n                }\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[2, 15, 18, 21]]);\n        }));\n        return function traverse(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      _traverse(this);\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newVal) {\n      var instanceChanged = newVal !== this.root.data;\n      if (instanceChanged) {\n        this.nodesMap = {};\n        this.root.setData(newVal);\n        this._initDefaultCheckedNodes();\n        this.setCurrentNodeKey(this.currentNodeKey);\n      } else {\n        this.root.updateChildren();\n      }\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(data) {\n      if (data instanceof Node) return data;\n      var key = isObject(data) ? getNodeKey(this.key, data) : data;\n      return this.nodesMap[key] || null;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertBefore({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertAfter({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(data) {\n      var node = this.getNode(data);\n      if (node && node.parent) {\n        if (node === this.currentNode) {\n          this.currentNode = null;\n        }\n        node.parent.removeChild(node);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(data, parentData) {\n      var parentNode = !isPropAbsent(parentData) ? this.getNode(parentData) : this.root;\n      if (parentNode) {\n        parentNode.insertChild({\n          data: data\n        });\n      }\n    }\n  }, {\n    key: \"_initDefaultCheckedNodes\",\n    value: function _initDefaultCheckedNodes() {\n      var _this2 = this;\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n      var nodesMap = this.nodesMap;\n      defaultCheckedKeys.forEach(function (checkedKey) {\n        var node = nodesMap[checkedKey];\n        if (node) {\n          node.setChecked(true, !_this2.checkStrictly);\n        }\n      });\n    }\n  }, {\n    key: \"_initDefaultCheckedNode\",\n    value: function _initDefaultCheckedNode(node) {\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n      if (defaultCheckedKeys.includes(node.key)) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    }\n  }, {\n    key: \"setDefaultCheckedKey\",\n    value: function setDefaultCheckedKey(newVal) {\n      if (newVal !== this.defaultCheckedKeys) {\n        this.defaultCheckedKeys = newVal;\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: \"registerNode\",\n    value: function registerNode(node) {\n      var key = this.key;\n      if (!node || !node.data) return;\n      if (!key) {\n        this.nodesMap[node.id] = node;\n      } else {\n        var nodeKey = node.key;\n        if (nodeKey !== void 0) this.nodesMap[node.key] = node;\n      }\n    }\n  }, {\n    key: \"deregisterNode\",\n    value: function deregisterNode(node) {\n      var _this3 = this;\n      var key = this.key;\n      if (!key || !node || !node.data) return;\n      node.childNodes.forEach(function (child) {\n        _this3.deregisterNode(child);\n      });\n      delete this.nodesMap[node.key];\n    }\n  }, {\n    key: \"getCheckedNodes\",\n    value: function getCheckedNodes() {\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedNodes = [];\n      var _traverse2 = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n            checkedNodes.push(child.data);\n          }\n          _traverse2(child);\n        });\n      };\n      _traverse2(this);\n      return checkedNodes;\n    }\n  }, {\n    key: \"getCheckedKeys\",\n    value: function getCheckedKeys() {\n      var _this4 = this;\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this.getCheckedNodes(leafOnly).map(function (data) {\n        return (data || {})[_this4.key];\n      });\n    }\n  }, {\n    key: \"getHalfCheckedNodes\",\n    value: function getHalfCheckedNodes() {\n      var nodes = [];\n      var _traverse3 = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if (child.indeterminate) {\n            nodes.push(child.data);\n          }\n          _traverse3(child);\n        });\n      };\n      _traverse3(this);\n      return nodes;\n    }\n  }, {\n    key: \"getHalfCheckedKeys\",\n    value: function getHalfCheckedKeys() {\n      var _this5 = this;\n      return this.getHalfCheckedNodes().map(function (data) {\n        return (data || {})[_this5.key];\n      });\n    }\n  }, {\n    key: \"_getAllNodes\",\n    value: function _getAllNodes() {\n      var allNodes = [];\n      var nodesMap = this.nodesMap;\n      for (var nodeKey in nodesMap) {\n        if (hasOwn(nodesMap, nodeKey)) {\n          allNodes.push(nodesMap[nodeKey]);\n        }\n      }\n      return allNodes;\n    }\n  }, {\n    key: \"updateChildren\",\n    value: function updateChildren(key, data) {\n      var node = this.nodesMap[key];\n      if (!node) return;\n      var childNodes = node.childNodes;\n      for (var i = childNodes.length - 1; i >= 0; i--) {\n        var child = childNodes[i];\n        this.remove(child.data);\n      }\n      for (var _i = 0, j = data.length; _i < j; _i++) {\n        var _child = data[_i];\n        this.append(_child, node.data);\n      }\n    }\n  }, {\n    key: \"_setCheckedKeys\",\n    value: function _setCheckedKeys(key) {\n      var _this6 = this;\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedKeys = arguments.length > 2 ? arguments[2] : undefined;\n      var allNodes = this._getAllNodes().sort(function (a, b) {\n        return a.level - b.level;\n      });\n      var cache = /* @__PURE__ */Object.create(null);\n      var keys = Object.keys(checkedKeys);\n      allNodes.forEach(function (node) {\n        return node.setChecked(false, false);\n      });\n      var _cacheCheckedChild = function cacheCheckedChild(node) {\n        node.childNodes.forEach(function (child) {\n          var _a;\n          cache[child.data[key]] = true;\n          if ((_a = child.childNodes) == null ? void 0 : _a.length) {\n            _cacheCheckedChild(child);\n          }\n        });\n      };\n      var _loop = function _loop() {\n          var node = allNodes[i];\n          var nodeKey = node.data[key].toString();\n          var checked = keys.includes(nodeKey);\n          if (!checked) {\n            if (node.checked && !cache[nodeKey]) {\n              node.setChecked(false, false);\n            }\n            return 0; // continue\n          }\n          if (node.childNodes.length) {\n            _cacheCheckedChild(node);\n          }\n          if (node.isLeaf || _this6.checkStrictly) {\n            node.setChecked(true, false);\n            return 0; // continue\n          }\n          node.setChecked(true, true);\n          if (leafOnly) {\n            node.setChecked(false, false);\n            var _traverse4 = function traverse(node2) {\n              var childNodes = node2.childNodes;\n              childNodes.forEach(function (child) {\n                if (!child.isLeaf) {\n                  child.setChecked(false, false);\n                }\n                _traverse4(child);\n              });\n            };\n            _traverse4(node);\n          }\n        },\n        _ret;\n      for (var i = 0, j = allNodes.length; i < j; i++) {\n        _ret = _loop();\n        if (_ret === 0) continue;\n      }\n    }\n  }, {\n    key: \"setCheckedNodes\",\n    value: function setCheckedNodes(array) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var key = this.key;\n      var checkedKeys = {};\n      array.forEach(function (item) {\n        checkedKeys[(item || {})[key]] = true;\n      });\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: \"setCheckedKeys\",\n    value: function setCheckedKeys(keys) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.defaultCheckedKeys = keys;\n      var key = this.key;\n      var checkedKeys = {};\n      keys.forEach(function (key2) {\n        checkedKeys[key2] = true;\n      });\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: \"setDefaultExpandedKeys\",\n    value: function setDefaultExpandedKeys(keys) {\n      var _this7 = this;\n      keys = keys || [];\n      this.defaultExpandedKeys = keys;\n      keys.forEach(function (key) {\n        var node = _this7.getNode(key);\n        if (node) node.expand(null, _this7.autoExpandParent);\n      });\n    }\n  }, {\n    key: \"setChecked\",\n    value: function setChecked(data, checked, deep) {\n      var node = this.getNode(data);\n      if (node) {\n        node.setChecked(!!checked, deep);\n      }\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.currentNode;\n    }\n  }, {\n    key: \"setCurrentNode\",\n    value: function setCurrentNode(currentNode) {\n      var prevCurrentNode = this.currentNode;\n      if (prevCurrentNode) {\n        prevCurrentNode.isCurrent = false;\n      }\n      this.currentNode = currentNode;\n      this.currentNode.isCurrent = true;\n    }\n  }, {\n    key: \"setUserCurrentNode\",\n    value: function setUserCurrentNode(node) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key = node[this.key];\n      var currNode = this.nodesMap[key];\n      this.setCurrentNode(currNode);\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true);\n      }\n    }\n  }, {\n    key: \"setCurrentNodeKey\",\n    value: function setCurrentNodeKey(key) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.currentNodeKey = key;\n      if (key === null || key === void 0) {\n        this.currentNode && (this.currentNode.isCurrent = false);\n        this.currentNode = null;\n        return;\n      }\n      var node = this.getNode(key);\n      if (node) {\n        this.setCurrentNode(node);\n        if (shouldAutoExpandParent && this.currentNode.level > 1) {\n          this.currentNode.parent.expand(null, true);\n        }\n      }\n    }\n  }]);\n}();\nexport { TreeStore as default };","map":{"version":3,"names":["TreeStore","options","_classCallCheck","currentNode","currentNodeKey","option","hasOwn","nodesMap","_createClass","key","value","initialize","_this","root","Node","data","store","lazy","load","loadFn","doCreateChildren","_initDefaultCheckedNodes","filter","filterNodeMethod","traverse","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","node","childNodes","_iterator","_step","_step$value","index","child","allHidden","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","entries","s","n","done","_slicedToArray","visible","call","nextTick","t0","e","f","finish","length","some","abrupt","isLeaf","loaded","expand","stop","_x","apply","arguments","setData","newVal","instanceChanged","setCurrentNodeKey","updateChildren","getNode","isObject","getNodeKey","insertBefore","refData","refNode","parent","insertAfter","remove","removeChild","append","parentData","parentNode","isPropAbsent","insertChild","_this2","defaultCheckedKeys","forEach","checkedKey","setChecked","checkStrictly","_initDefaultCheckedNode","includes","setDefaultCheckedKey","registerNode","id","nodeKey","deregisterNode","_this3","getCheckedNodes","leafOnly","undefined","includeHalfChecked","checkedNodes","checked","indeterminate","push","getCheckedKeys","_this4","map","getHalfCheckedNodes","nodes","getHalfCheckedKeys","_this5","_getAllNodes","allNodes","i","j","_setCheckedKeys","_this6","checkedKeys","sort","a","b","level","cache","Object","create","keys","cacheCheckedChild","_a","_loop","toString","node2","_ret","setCheckedNodes","array","item","setCheckedKeys","key2","setDefaultExpandedKeys","_this7","defaultExpandedKeys","autoExpandParent","deep","getCurrentNode","setCurrentNode","prevCurrentNode","isCurrent","setUserCurrentNode","shouldAutoExpandParent","currNode"],"sources":["../../../../../../../packages/components/tree/src/model/tree-store.ts"],"sourcesContent":["// @ts-nocheck\nimport { nextTick } from 'vue'\nimport { hasOwn, isObject, isPropAbsent } from '@element-plus/utils'\nimport Node from './node'\nimport { getNodeKey } from './util'\n\nimport type {\n  FilterNodeMethodFunction,\n  FilterValue,\n  LoadFunction,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n  TreeOptionProps,\n  TreeStoreNodesMap,\n  TreeStoreOptions,\n} from '../tree.type'\n\nexport default class TreeStore {\n  currentNode: Node\n  currentNodeKey: TreeKey\n  nodesMap: TreeStoreNodesMap\n  root: Node\n  data: TreeData\n  lazy: boolean\n  load: LoadFunction\n  filterNodeMethod: FilterNodeMethodFunction\n  key: TreeKey\n  defaultCheckedKeys: TreeKey[]\n  checkStrictly: boolean\n  defaultExpandedKeys: TreeKey[]\n  autoExpandParent: boolean\n  defaultExpandAll: boolean\n  checkDescendants: boolean\n  props: TreeOptionProps\n\n  constructor(options: TreeStoreOptions) {\n    this.currentNode = null\n    this.currentNodeKey = null\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n\n    this.nodesMap = {}\n  }\n\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this,\n    })\n    this.root.initialize()\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data)\n        this._initDefaultCheckedNodes()\n      })\n    } else {\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  filter(value: FilterValue): void {\n    const filterNodeMethod = this.filterNodeMethod\n    const lazy = this.lazy\n    const traverse = async function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      for (const [index, child] of childNodes.entries()) {\n        child.visible = filterNodeMethod.call(child, value, child.data, child)\n\n        if (index % 80 === 0 && index > 0) {\n          await nextTick()\n        }\n        traverse(child)\n      }\n\n      if (!(node as Node).visible && childNodes.length) {\n        let allHidden = true\n        allHidden = !childNodes.some((child) => child.visible)\n\n        if ((node as TreeStore).root) {\n          ;(node as TreeStore).root.visible = allHidden === false\n        } else {\n          ;(node as Node).visible = allHidden === false\n        }\n      }\n      if (!value) return\n\n      if ((node as Node).visible && !(node as Node).isLeaf) {\n        if (!lazy || node.loaded) {\n          ;(node as Node).expand()\n        }\n      }\n    }\n\n    traverse(this)\n  }\n\n  setData(newVal: TreeData): void {\n    const instanceChanged = newVal !== this.root.data\n    if (instanceChanged) {\n      this.nodesMap = {}\n      this.root.setData(newVal)\n      this._initDefaultCheckedNodes()\n      this.setCurrentNodeKey(this.currentNodeKey)\n    } else {\n      this.root.updateChildren()\n    }\n  }\n\n  getNode(data: TreeKey | TreeNodeData | Node): Node {\n    if (data instanceof Node) return data\n    const key = isObject(data) ? getNodeKey(this.key, data) : data\n    return this.nodesMap[key] || null\n  }\n\n  insertBefore(\n    data: TreeNodeData,\n    refData: TreeKey | TreeNodeData | Node\n  ): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertBefore({ data }, refNode)\n  }\n\n  insertAfter(\n    data: TreeNodeData,\n    refData: TreeKey | TreeNodeData | Node\n  ): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertAfter({ data }, refNode)\n  }\n\n  remove(data: TreeNodeData | Node): void {\n    const node = this.getNode(data)\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null\n      }\n      node.parent.removeChild(node)\n    }\n  }\n\n  append(data: TreeNodeData, parentData: TreeNodeData | TreeKey | Node): void {\n    const parentNode = !isPropAbsent(parentData)\n      ? this.getNode(parentData)\n      : this.root\n\n    if (parentNode) {\n      parentNode.insertChild({ data })\n    }\n  }\n\n  _initDefaultCheckedNodes(): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n    const nodesMap = this.nodesMap\n\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey]\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly)\n      }\n    })\n  }\n\n  _initDefaultCheckedNode(node: Node): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n\n    if (defaultCheckedKeys.includes(node.key)) {\n      node.setChecked(true, !this.checkStrictly)\n    }\n  }\n\n  setDefaultCheckedKey(newVal: TreeKey[]): void {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  registerNode(node: Node): void {\n    const key = this.key\n    if (!node || !node.data) return\n\n    if (!key) {\n      this.nodesMap[node.id] = node\n    } else {\n      const nodeKey = node.key\n      if (nodeKey !== undefined) this.nodesMap[node.key] = node\n    }\n  }\n\n  deregisterNode(node: Node): void {\n    const key = this.key\n    if (!key || !node || !node.data) return\n\n    node.childNodes.forEach((child) => {\n      this.deregisterNode(child)\n    })\n\n    delete this.nodesMap[node.key]\n  }\n\n  getCheckedNodes(\n    leafOnly = false,\n    includeHalfChecked = false\n  ): TreeNodeData[] {\n    const checkedNodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (\n          (child.checked || (includeHalfChecked && child.indeterminate)) &&\n          (!leafOnly || (leafOnly && child.isLeaf))\n        ) {\n          checkedNodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return checkedNodes\n  }\n\n  getCheckedKeys(leafOnly = false): TreeKey[] {\n    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key])\n  }\n\n  getHalfCheckedNodes(): TreeNodeData[] {\n    const nodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (child.indeterminate) {\n          nodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return nodes\n  }\n\n  getHalfCheckedKeys(): TreeKey[] {\n    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key])\n  }\n\n  _getAllNodes(): Node[] {\n    const allNodes: Node[] = []\n    const nodesMap = this.nodesMap\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey])\n      }\n    }\n\n    return allNodes\n  }\n\n  updateChildren(key: TreeKey, data: TreeData): void {\n    const node = this.nodesMap[key]\n    if (!node) return\n    const childNodes = node.childNodes\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i]\n      this.remove(child.data)\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i]\n      this.append(child, node.data)\n    }\n  }\n\n  _setCheckedKeys(\n    key: TreeKey,\n    leafOnly = false,\n    checkedKeys: { [key: string]: boolean }\n  ): void {\n    const allNodes = this._getAllNodes().sort((a, b) => a.level - b.level)\n    const cache = Object.create(null)\n    const keys = Object.keys(checkedKeys)\n    allNodes.forEach((node) => node.setChecked(false, false))\n    const cacheCheckedChild = (node) => {\n      node.childNodes.forEach((child) => {\n        cache[child.data[key]] = true\n        if (child.childNodes?.length) {\n          cacheCheckedChild(child)\n        }\n      })\n    }\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i]\n      const nodeKey = node.data[key].toString()\n      const checked = keys.includes(nodeKey)\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false)\n        }\n        continue\n      }\n\n      if (node.childNodes.length) {\n        cacheCheckedChild(node)\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false)\n        continue\n      }\n      node.setChecked(true, true)\n\n      if (leafOnly) {\n        node.setChecked(false, false)\n        const traverse = function (node: Node): void {\n          const childNodes = node.childNodes\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false)\n            }\n            traverse(child)\n          })\n        }\n        traverse(node)\n      }\n    }\n  }\n\n  setCheckedNodes(array: Node[], leafOnly = false): void {\n    const key = this.key\n    const checkedKeys = {}\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setCheckedKeys(keys: TreeKey[], leafOnly = false): void {\n    this.defaultCheckedKeys = keys\n    const key = this.key\n    const checkedKeys = {}\n    keys.forEach((key) => {\n      checkedKeys[key] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setDefaultExpandedKeys(keys: TreeKey[]) {\n    keys = keys || []\n    this.defaultExpandedKeys = keys\n    keys.forEach((key) => {\n      const node = this.getNode(key)\n      if (node) node.expand(null, this.autoExpandParent)\n    })\n  }\n\n  setChecked(\n    data: TreeKey | TreeNodeData,\n    checked: boolean,\n    deep: boolean\n  ): void {\n    const node = this.getNode(data)\n\n    if (node) {\n      node.setChecked(!!checked, deep)\n    }\n  }\n\n  getCurrentNode(): Node {\n    return this.currentNode\n  }\n\n  setCurrentNode(currentNode: Node): void {\n    const prevCurrentNode = this.currentNode\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false\n    }\n    this.currentNode = currentNode\n    this.currentNode.isCurrent = true\n  }\n\n  setUserCurrentNode(node: Node, shouldAutoExpandParent = true): void {\n    const key = node[this.key]\n    const currNode = this.nodesMap[key]\n    this.setCurrentNode(currNode)\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true)\n    }\n  }\n\n  setCurrentNodeKey(key?: TreeKey, shouldAutoExpandParent = true): void {\n    this.currentNodeKey = key\n    if (key === null || key === undefined) {\n      this.currentNode && (this.currentNode.isCurrent = false)\n      this.currentNode = null\n      return\n    }\n    const node = this.getNode(key)\n    if (node) {\n      this.setCurrentNode(node)\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true)\n      }\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqBA,SAAS;EAC5B,SAAAA,UAAYC,OAAO,EAAE;IAAAC,eAAA,OAAAF,SAAA;IACnB,IAAI,CAACG,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,KAAK,IAAMC,MAAM,IAAIJ,OAAO,EAAE;MAC5B,IAAIK,MAAM,CAACL,OAAO,EAAEI,MAAM,CAAC,EAAE;QAC3B,IAAI,CAACA,MAAM,CAAC,GAAGJ,OAAO,CAACI,MAAM,CAAC;MACtC;IACA;IACI,IAAI,CAACE,QAAQ,GAAG,EAAE;EACtB;EAAG,OAAAC,YAAA,CAAAR,SAAA;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAC,UAAUA,CAAA,EAAG;MAAA,IAAAC,KAAA;MACX,IAAI,CAACC,IAAI,GAAG,IAAIC,IAAI,CAAC;QACnBC,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,KAAK,EAAE;MACb,CAAK,CAAC;MACF,IAAI,CAACH,IAAI,CAACF,UAAU,EAAE;MACtB,IAAI,IAAI,CAACM,IAAI,IAAI,IAAI,CAACC,IAAI,EAAE;QAC1B,IAAMC,MAAM,GAAG,IAAI,CAACD,IAAI;QACxBC,MAAM,CAAC,IAAI,CAACN,IAAI,EAAE,UAACE,IAAI,EAAK;UAC1BH,KAAI,CAACC,IAAI,CAACO,gBAAgB,CAACL,IAAI,CAAC;UAChCH,KAAI,CAACS,wBAAwB,EAAE;QACvC,CAAO,CAAC;MACR,CAAK,MAAM;QACL,IAAI,CAACA,wBAAwB,EAAE;MACrC;IACA;EAAG;IAAAZ,GAAA;IAAAC,KAAA,EACD,SAAAY,MAAMA,CAACZ,KAAK,EAAE;MACZ,IAAMa,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;MAC9C,IAAMN,IAAI,GAAG,IAAI,CAACA,IAAI;MACtB,IAAMO,SAAQ;QAAA,IAAAC,IAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAeC,IAAI;UAAA,IAAAC,UAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,WAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,SAAA;UAAA,OAAAV,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAC5BX,UAAU,GAAGD,IAAI,CAACjB,IAAI,GAAGiB,IAAI,CAACjB,IAAI,CAACkB,UAAU,GAAGD,IAAI,CAACC,UAAU;gBAAAC,SAAA,GAAAW,0BAAA,CACxCZ,UAAU,CAACa,OAAO,EAAE;gBAAAJ,QAAA,CAAAC,IAAA;gBAAAT,SAAA,CAAAa,CAAA;cAAA;gBAAA,KAAAZ,KAAA,GAAAD,SAAA,CAAAc,CAAA,IAAAC,IAAA;kBAAAP,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAAR,WAAA,GAAAc,cAAA,CAAAf,KAAA,CAAAvB,KAAA,MAArCyB,KAAK,GAAAD,WAAA,KAAEE,KAAK,GAAAF,WAAA;gBACtBE,KAAK,CAACa,OAAO,GAAG1B,gBAAgB,CAAC2B,IAAI,CAACd,KAAK,EAAE1B,KAAK,EAAE0B,KAAK,CAACrB,IAAI,EAAEqB,KAAK,CAAC;gBAAC,MACnED,KAAK,GAAG,EAAE,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC;kBAAAK,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAAF,QAAA,CAAAE,IAAA;gBAAA,OACzBS,QAAQ,EAAE;cAAA;gBAElB3B,SAAQ,CAACY,KAAK,CAAC;cAAC;gBAAAI,QAAA,CAAAE,IAAA;gBAAA;cAAA;gBAAAF,QAAA,CAAAE,IAAA;gBAAA;cAAA;gBAAAF,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAY,EAAA,GAAAZ,QAAA;gBAAAR,SAAA,CAAAqB,CAAA,CAAAb,QAAA,CAAAY,EAAA;cAAA;gBAAAZ,QAAA,CAAAC,IAAA;gBAAAT,SAAA,CAAAsB,CAAA;gBAAA,OAAAd,QAAA,CAAAe,MAAA;cAAA;gBAElB,IAAI,CAACzB,IAAI,CAACmB,OAAO,IAAIlB,UAAU,CAACyB,MAAM,EAAE;kBAClCnB,SAAS,GAAG,IAAI;kBACpBA,SAAS,GAAG,CAACN,UAAU,CAAC0B,IAAI,CAAC,UAACrB,KAAK;oBAAA,OAAKA,KAAK,CAACa,OAAO;kBAAA,EAAC;kBACtD,IAAInB,IAAI,CAACjB,IAAI,EAAE;oBAEbiB,IAAI,CAACjB,IAAI,CAACoC,OAAO,GAAGZ,SAAS,KAAK,KAAK;kBACjD,CAAS,MAAM;oBAELP,IAAI,CAACmB,OAAO,GAAGZ,SAAS,KAAK,KAAK;kBAC5C;gBACA;gBAAO,IACI3B,KAAK;kBAAA8B,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAA,OAAAF,QAAA,CAAAkB,MAAA;cAAA;gBAEV,IAAI5B,IAAI,CAACmB,OAAO,IAAI,CAACnB,IAAI,CAAC6B,MAAM,EAAE;kBAChC,IAAI,CAAC1C,IAAI,IAAIa,IAAI,CAAC8B,MAAM,EAAE;oBAExB9B,IAAI,CAAC+B,MAAM,EAAE;kBACvB;gBACA;cAAO;cAAA;gBAAA,OAAArB,QAAA,CAAAsB,IAAA;YAAA;UAAA,GAAAjC,OAAA;QAAA,CACF;QAAA,gBA5BKL,QAAQA,CAAAuC,EAAA;UAAA,OAAAtC,IAAA,CAAAuC,KAAA,OAAAC,SAAA;QAAA;MAAA,GA4Bb;MACDzC,SAAQ,CAAC,IAAI,CAAC;IAClB;EAAG;IAAAf,GAAA;IAAAC,KAAA,EACD,SAAAwD,OAAOA,CAACC,MAAM,EAAE;MACd,IAAMC,eAAe,GAAGD,MAAM,KAAK,IAAI,CAACtD,IAAI,CAACE,IAAI;MACjD,IAAIqD,eAAe,EAAE;QACnB,IAAI,CAAC7D,QAAQ,GAAG,EAAE;QAClB,IAAI,CAACM,IAAI,CAACqD,OAAO,CAACC,MAAM,CAAC;QACzB,IAAI,CAAC9C,wBAAwB,EAAE;QAC/B,IAAI,CAACgD,iBAAiB,CAAC,IAAI,CAACjE,cAAc,CAAC;MACjD,CAAK,MAAM;QACL,IAAI,CAACS,IAAI,CAACyD,cAAc,EAAE;MAChC;IACA;EAAG;IAAA7D,GAAA;IAAAC,KAAA,EACD,SAAA6D,OAAOA,CAACxD,IAAI,EAAE;MACZ,IAAIA,IAAI,YAAYD,IAAI,EACtB,OAAOC,IAAI;MACb,IAAMN,GAAG,GAAG+D,QAAQ,CAACzD,IAAI,CAAC,GAAG0D,UAAU,CAAC,IAAI,CAAChE,GAAG,EAAEM,IAAI,CAAC,GAAGA,IAAI;MAC9D,OAAO,IAAI,CAACR,QAAQ,CAACE,GAAG,CAAC,IAAI,IAAI;IACrC;EAAG;IAAAA,GAAA;IAAAC,KAAA,EACD,SAAAgE,YAAYA,CAAC3D,IAAI,EAAE4D,OAAO,EAAE;MAC1B,IAAMC,OAAO,GAAG,IAAI,CAACL,OAAO,CAACI,OAAO,CAAC;MACrCC,OAAO,CAACC,MAAM,CAACH,YAAY,CAAC;QAAE3D,IAAI,EAAJA;MAAI,CAAE,EAAE6D,OAAO,CAAC;IAClD;EAAG;IAAAnE,GAAA;IAAAC,KAAA,EACD,SAAAoE,WAAWA,CAAC/D,IAAI,EAAE4D,OAAO,EAAE;MACzB,IAAMC,OAAO,GAAG,IAAI,CAACL,OAAO,CAACI,OAAO,CAAC;MACrCC,OAAO,CAACC,MAAM,CAACC,WAAW,CAAC;QAAE/D,IAAI,EAAJA;MAAI,CAAE,EAAE6D,OAAO,CAAC;IACjD;EAAG;IAAAnE,GAAA;IAAAC,KAAA,EACD,SAAAqE,MAAMA,CAAChE,IAAI,EAAE;MACX,IAAMe,IAAI,GAAG,IAAI,CAACyC,OAAO,CAACxD,IAAI,CAAC;MAC/B,IAAIe,IAAI,IAAIA,IAAI,CAAC+C,MAAM,EAAE;QACvB,IAAI/C,IAAI,KAAK,IAAI,CAAC3B,WAAW,EAAE;UAC7B,IAAI,CAACA,WAAW,GAAG,IAAI;QAC/B;QACM2B,IAAI,CAAC+C,MAAM,CAACG,WAAW,CAAClD,IAAI,CAAC;MACnC;IACA;EAAG;IAAArB,GAAA;IAAAC,KAAA,EACD,SAAAuE,MAAMA,CAAClE,IAAI,EAAEmE,UAAU,EAAE;MACvB,IAAMC,UAAU,GAAG,CAACC,YAAY,CAACF,UAAU,CAAC,GAAG,IAAI,CAACX,OAAO,CAACW,UAAU,CAAC,GAAG,IAAI,CAACrE,IAAI;MACnF,IAAIsE,UAAU,EAAE;QACdA,UAAU,CAACE,WAAW,CAAC;UAAEtE,IAAI,EAAJA;QAAI,CAAE,CAAC;MACtC;IACA;EAAG;IAAAN,GAAA;IAAAC,KAAA,EACD,SAAAW,wBAAwBA,CAAA,EAAG;MAAA,IAAAiE,MAAA;MACzB,IAAMC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,IAAI,EAAE;MACxD,IAAMhF,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9BgF,kBAAkB,CAACC,OAAO,CAAC,UAACC,UAAU,EAAK;QACzC,IAAM3D,IAAI,GAAGvB,QAAQ,CAACkF,UAAU,CAAC;QACjC,IAAI3D,IAAI,EAAE;UACRA,IAAI,CAAC4D,UAAU,CAAC,IAAI,EAAE,CAACJ,MAAI,CAACK,aAAa,CAAC;QAClD;MACA,CAAK,CAAC;IACN;EAAG;IAAAlF,GAAA;IAAAC,KAAA,EACD,SAAAkF,uBAAuBA,CAAC9D,IAAI,EAAE;MAC5B,IAAMyD,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,IAAI,EAAE;MACxD,IAAIA,kBAAkB,CAACM,QAAQ,CAAC/D,IAAI,CAACrB,GAAG,CAAC,EAAE;QACzCqB,IAAI,CAAC4D,UAAU,CAAC,IAAI,EAAE,CAAC,IAAI,CAACC,aAAa,CAAC;MAChD;IACA;EAAG;IAAAlF,GAAA;IAAAC,KAAA,EACD,SAAAoF,oBAAoBA,CAAC3B,MAAM,EAAE;MAC3B,IAAIA,MAAM,KAAK,IAAI,CAACoB,kBAAkB,EAAE;QACtC,IAAI,CAACA,kBAAkB,GAAGpB,MAAM;QAChC,IAAI,CAAC9C,wBAAwB,EAAE;MACrC;IACA;EAAG;IAAAZ,GAAA;IAAAC,KAAA,EACD,SAAAqF,YAAYA,CAACjE,IAAI,EAAE;MACjB,IAAMrB,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAI,CAACqB,IAAI,IAAI,CAACA,IAAI,CAACf,IAAI,EACrB;MACF,IAAI,CAACN,GAAG,EAAE;QACR,IAAI,CAACF,QAAQ,CAACuB,IAAI,CAACkE,EAAE,CAAC,GAAGlE,IAAI;MACnC,CAAK,MAAM;QACL,IAAMmE,OAAO,GAAGnE,IAAI,CAACrB,GAAG;QACxB,IAAIwF,OAAO,KAAK,KAAK,CAAC,EACpB,IAAI,CAAC1F,QAAQ,CAACuB,IAAI,CAACrB,GAAG,CAAC,GAAGqB,IAAI;MACtC;IACA;EAAG;IAAArB,GAAA;IAAAC,KAAA,EACD,SAAAwF,cAAcA,CAACpE,IAAI,EAAE;MAAA,IAAAqE,MAAA;MACnB,IAAM1F,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAI,CAACA,GAAG,IAAI,CAACqB,IAAI,IAAI,CAACA,IAAI,CAACf,IAAI,EAC7B;MACFe,IAAI,CAACC,UAAU,CAACyD,OAAO,CAAC,UAACpD,KAAK,EAAK;QACjC+D,MAAI,CAACD,cAAc,CAAC9D,KAAK,CAAC;MAChC,CAAK,CAAC;MACF,OAAO,IAAI,CAAC7B,QAAQ,CAACuB,IAAI,CAACrB,GAAG,CAAC;IAClC;EAAG;IAAAA,GAAA;IAAAC,KAAA,EACD,SAAA0F,eAAeA,CAAA,EAA+C;MAAA,IAA9CC,QAAQ,GAAApC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,KAAK;MAAA,IAAEsC,kBAAkB,GAAAtC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,KAAK;MAC1D,IAAMuC,YAAY,GAAG,EAAE;MACvB,IAAMhF,UAAQ,GAAG,SAAXA,QAAQA,CAAYM,IAAI,EAAE;QAC9B,IAAMC,UAAU,GAAGD,IAAI,CAACjB,IAAI,GAAGiB,IAAI,CAACjB,IAAI,CAACkB,UAAU,GAAGD,IAAI,CAACC,UAAU;QACrEA,UAAU,CAACyD,OAAO,CAAC,UAACpD,KAAK,EAAK;UAC5B,IAAI,CAACA,KAAK,CAACqE,OAAO,IAAIF,kBAAkB,IAAInE,KAAK,CAACsE,aAAa,MAAM,CAACL,QAAQ,IAAIA,QAAQ,IAAIjE,KAAK,CAACuB,MAAM,CAAC,EAAE;YAC3G6C,YAAY,CAACG,IAAI,CAACvE,KAAK,CAACrB,IAAI,CAAC;UACvC;UACQS,UAAQ,CAACY,KAAK,CAAC;QACvB,CAAO,CAAC;MACR,CAAK;MACDZ,UAAQ,CAAC,IAAI,CAAC;MACd,OAAOgF,YAAY;IACvB;EAAG;IAAA/F,GAAA;IAAAC,KAAA,EACD,SAAAkG,cAAcA,CAAA,EAAmB;MAAA,IAAAC,MAAA;MAAA,IAAlBR,QAAQ,GAAApC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,KAAK;MAC7B,OAAO,IAAI,CAACmC,eAAe,CAACC,QAAQ,CAAC,CAACS,GAAG,CAAC,UAAC/F,IAAI;QAAA,OAAK,CAACA,IAAI,IAAI,EAAE,EAAE8F,MAAI,CAACpG,GAAG,CAAC;MAAA,EAAC;IAC/E;EAAG;IAAAA,GAAA;IAAAC,KAAA,EACD,SAAAqG,mBAAmBA,CAAA,EAAG;MACpB,IAAMC,KAAK,GAAG,EAAE;MAChB,IAAMxF,UAAQ,GAAG,SAAXA,QAAQA,CAAYM,IAAI,EAAE;QAC9B,IAAMC,UAAU,GAAGD,IAAI,CAACjB,IAAI,GAAGiB,IAAI,CAACjB,IAAI,CAACkB,UAAU,GAAGD,IAAI,CAACC,UAAU;QACrEA,UAAU,CAACyD,OAAO,CAAC,UAACpD,KAAK,EAAK;UAC5B,IAAIA,KAAK,CAACsE,aAAa,EAAE;YACvBM,KAAK,CAACL,IAAI,CAACvE,KAAK,CAACrB,IAAI,CAAC;UAChC;UACQS,UAAQ,CAACY,KAAK,CAAC;QACvB,CAAO,CAAC;MACR,CAAK;MACDZ,UAAQ,CAAC,IAAI,CAAC;MACd,OAAOwF,KAAK;IAChB;EAAG;IAAAvG,GAAA;IAAAC,KAAA,EACD,SAAAuG,kBAAkBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MACnB,OAAO,IAAI,CAACH,mBAAmB,EAAE,CAACD,GAAG,CAAC,UAAC/F,IAAI;QAAA,OAAK,CAACA,IAAI,IAAI,EAAE,EAAEmG,MAAI,CAACzG,GAAG,CAAC;MAAA,EAAC;IAC3E;EAAG;IAAAA,GAAA;IAAAC,KAAA,EACD,SAAAyG,YAAYA,CAAA,EAAG;MACb,IAAMC,QAAQ,GAAG,EAAE;MACnB,IAAM7G,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,KAAK,IAAM0F,OAAO,IAAI1F,QAAQ,EAAE;QAC9B,IAAID,MAAM,CAACC,QAAQ,EAAE0F,OAAO,CAAC,EAAE;UAC7BmB,QAAQ,CAACT,IAAI,CAACpG,QAAQ,CAAC0F,OAAO,CAAC,CAAC;QACxC;MACA;MACI,OAAOmB,QAAQ;IACnB;EAAG;IAAA3G,GAAA;IAAAC,KAAA,EACD,SAAA4D,cAAcA,CAAC7D,GAAG,EAAEM,IAAI,EAAE;MACxB,IAAMe,IAAI,GAAG,IAAI,CAACvB,QAAQ,CAACE,GAAG,CAAC;MAC/B,IAAI,CAACqB,IAAI,EACP;MACF,IAAMC,UAAU,GAAGD,IAAI,CAACC,UAAU;MAClC,KAAK,IAAIsF,CAAC,GAAGtF,UAAU,CAACyB,MAAM,GAAG,CAAC,EAAE6D,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC/C,IAAMjF,KAAK,GAAGL,UAAU,CAACsF,CAAC,CAAC;QAC3B,IAAI,CAACtC,MAAM,CAAC3C,KAAK,CAACrB,IAAI,CAAC;MAC7B;MACI,KAAK,IAAIsG,EAAC,GAAG,CAAC,EAAEC,CAAC,GAAGvG,IAAI,CAACyC,MAAM,EAAE6D,EAAC,GAAGC,CAAC,EAAED,EAAC,EAAE,EAAE;QAC3C,IAAMjF,MAAK,GAAGrB,IAAI,CAACsG,EAAC,CAAC;QACrB,IAAI,CAACpC,MAAM,CAAC7C,MAAK,EAAEN,IAAI,CAACf,IAAI,CAAC;MACnC;IACA;EAAG;IAAAN,GAAA;IAAAC,KAAA,EACD,SAAA6G,eAAeA,CAAC9G,GAAG,EAAiC;MAAA,IAAA+G,MAAA;MAAA,IAA/BnB,QAAQ,GAAApC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,KAAK;MAAA,IAAEwD,WAAW,GAAAxD,SAAA,CAAAT,MAAA,OAAAS,SAAA,MAAAqC,SAAA;MAChD,IAAMc,QAAQ,GAAG,IAAI,CAACD,YAAY,EAAE,CAACO,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK;MAAA,EAAC;MACtE,IAAMC,KAAK,kBAAmBC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACjD,IAAMC,IAAI,GAAGF,MAAM,CAACE,IAAI,CAACR,WAAW,CAAC;MACrCL,QAAQ,CAAC5B,OAAO,CAAC,UAAC1D,IAAI;QAAA,OAAKA,IAAI,CAAC4D,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC;MAAA,EAAC;MACzD,IAAMwC,kBAAiB,GAAG,SAApBA,iBAAiBA,CAAIpG,IAAI,EAAK;QAClCA,IAAI,CAACC,UAAU,CAACyD,OAAO,CAAC,UAACpD,KAAK,EAAK;UACjC,IAAI+F,EAAE;UACNL,KAAK,CAAC1F,KAAK,CAACrB,IAAI,CAACN,GAAG,CAAC,CAAC,GAAG,IAAI;UAC7B,IAAI,CAAC0H,EAAE,GAAG/F,KAAK,CAACL,UAAU,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGoG,EAAE,CAAC3E,MAAM,EAAE;YACxD0E,kBAAiB,CAAC9F,KAAK,CAAC;UAClC;QACA,CAAO,CAAC;MACR,CAAK;MAAC,IAAAgG,KAAA,YAAAA,MAAA,EAC+C;UAC/C,IAAMtG,IAAI,GAAGsF,QAAQ,CAACC,CAAC,CAAC;UACxB,IAAMpB,OAAO,GAAGnE,IAAI,CAACf,IAAI,CAACN,GAAG,CAAC,CAAC4H,QAAQ,EAAE;UACzC,IAAM5B,OAAO,GAAGwB,IAAI,CAACpC,QAAQ,CAACI,OAAO,CAAC;UACtC,IAAI,CAACQ,OAAO,EAAE;YACZ,IAAI3E,IAAI,CAAC2E,OAAO,IAAI,CAACqB,KAAK,CAAC7B,OAAO,CAAC,EAAE;cACnCnE,IAAI,CAAC4D,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC;YACvC;YAAS;UAET;UACM,IAAI5D,IAAI,CAACC,UAAU,CAACyB,MAAM,EAAE;YAC1B0E,kBAAiB,CAACpG,IAAI,CAAC;UAC/B;UACM,IAAIA,IAAI,CAAC6B,MAAM,IAAI6D,MAAI,CAAC7B,aAAa,EAAE;YACrC7D,IAAI,CAAC4D,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;YAAC;UAErC;UACM5D,IAAI,CAAC4D,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC;UAC3B,IAAIW,QAAQ,EAAE;YACZvE,IAAI,CAAC4D,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC;YAC7B,IAAMlE,UAAQ,GAAG,SAAXA,QAAQA,CAAY8G,KAAK,EAAE;cAC/B,IAAMvG,UAAU,GAAGuG,KAAK,CAACvG,UAAU;cACnCA,UAAU,CAACyD,OAAO,CAAC,UAACpD,KAAK,EAAK;gBAC5B,IAAI,CAACA,KAAK,CAACuB,MAAM,EAAE;kBACjBvB,KAAK,CAACsD,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC;gBAC5C;gBACYlE,UAAQ,CAACY,KAAK,CAAC;cAC3B,CAAW,CAAC;YACZ,CAAS;YACDZ,UAAQ,CAACM,IAAI,CAAC;UACtB;QACA,CAAK;QAAAyG,IAAA;MA/BD,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,QAAQ,CAAC5D,MAAM,EAAE6D,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE;QAAAkB,IAAA,GAAAH,KAAA;QAAA,IAAAG,IAAA,QAQ3C;MAAS;IAwBjB;EAAG;IAAA9H,GAAA;IAAAC,KAAA,EACD,SAAA8H,eAAeA,CAACC,KAAK,EAAoB;MAAA,IAAlBpC,QAAQ,GAAApC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,KAAK;MACrC,IAAMxD,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAMgH,WAAW,GAAG,EAAE;MACtBgB,KAAK,CAACjD,OAAO,CAAC,UAACkD,IAAI,EAAK;QACtBjB,WAAW,CAAC,CAACiB,IAAI,IAAI,EAAE,EAAEjI,GAAG,CAAC,CAAC,GAAG,IAAI;MAC3C,CAAK,CAAC;MACF,IAAI,CAAC8G,eAAe,CAAC9G,GAAG,EAAE4F,QAAQ,EAAEoB,WAAW,CAAC;IACpD;EAAG;IAAAhH,GAAA;IAAAC,KAAA,EACD,SAAAiI,cAAcA,CAACV,IAAI,EAAoB;MAAA,IAAlB5B,QAAQ,GAAApC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,KAAK;MACnC,IAAI,CAACsB,kBAAkB,GAAG0C,IAAI;MAC9B,IAAMxH,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAMgH,WAAW,GAAG,EAAE;MACtBQ,IAAI,CAACzC,OAAO,CAAC,UAACoD,IAAI,EAAK;QACrBnB,WAAW,CAACmB,IAAI,CAAC,GAAG,IAAI;MAC9B,CAAK,CAAC;MACF,IAAI,CAACrB,eAAe,CAAC9G,GAAG,EAAE4F,QAAQ,EAAEoB,WAAW,CAAC;IACpD;EAAG;IAAAhH,GAAA;IAAAC,KAAA,EACD,SAAAmI,sBAAsBA,CAACZ,IAAI,EAAE;MAAA,IAAAa,MAAA;MAC3Bb,IAAI,GAAGA,IAAI,IAAI,EAAE;MACjB,IAAI,CAACc,mBAAmB,GAAGd,IAAI;MAC/BA,IAAI,CAACzC,OAAO,CAAC,UAAC/E,GAAG,EAAK;QACpB,IAAMqB,IAAI,GAAGgH,MAAI,CAACvE,OAAO,CAAC9D,GAAG,CAAC;QAC9B,IAAIqB,IAAI,EACNA,IAAI,CAAC+B,MAAM,CAAC,IAAI,EAAEiF,MAAI,CAACE,gBAAgB,CAAC;MAChD,CAAK,CAAC;IACN;EAAG;IAAAvI,GAAA;IAAAC,KAAA,EACD,SAAAgF,UAAUA,CAAC3E,IAAI,EAAE0F,OAAO,EAAEwC,IAAI,EAAE;MAC9B,IAAMnH,IAAI,GAAG,IAAI,CAACyC,OAAO,CAACxD,IAAI,CAAC;MAC/B,IAAIe,IAAI,EAAE;QACRA,IAAI,CAAC4D,UAAU,CAAC,CAAC,CAACe,OAAO,EAAEwC,IAAI,CAAC;MACtC;IACA;EAAG;IAAAxI,GAAA;IAAAC,KAAA,EACD,SAAAwI,cAAcA,CAAA,EAAG;MACf,OAAO,IAAI,CAAC/I,WAAW;IAC3B;EAAG;IAAAM,GAAA;IAAAC,KAAA,EACD,SAAAyI,cAAcA,CAAChJ,WAAW,EAAE;MAC1B,IAAMiJ,eAAe,GAAG,IAAI,CAACjJ,WAAW;MACxC,IAAIiJ,eAAe,EAAE;QACnBA,eAAe,CAACC,SAAS,GAAG,KAAK;MACvC;MACI,IAAI,CAAClJ,WAAW,GAAGA,WAAW;MAC9B,IAAI,CAACA,WAAW,CAACkJ,SAAS,GAAG,IAAI;IACrC;EAAG;IAAA5I,GAAA;IAAAC,KAAA,EACD,SAAA4I,kBAAkBA,CAACxH,IAAI,EAAiC;MAAA,IAA/ByH,sBAAsB,GAAAtF,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,IAAI;MACpD,IAAMxD,GAAG,GAAGqB,IAAI,CAAC,IAAI,CAACrB,GAAG,CAAC;MAC1B,IAAM+I,QAAQ,GAAG,IAAI,CAACjJ,QAAQ,CAACE,GAAG,CAAC;MACnC,IAAI,CAAC0I,cAAc,CAACK,QAAQ,CAAC;MAC7B,IAAID,sBAAsB,IAAI,IAAI,CAACpJ,WAAW,CAAC0H,KAAK,GAAG,CAAC,EAAE;QACxD,IAAI,CAAC1H,WAAW,CAAC0E,MAAM,CAAChB,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;MAChD;IACA;EAAG;IAAApD,GAAA;IAAAC,KAAA,EACD,SAAA2D,iBAAiBA,CAAC5D,GAAG,EAAiC;MAAA,IAA/B8I,sBAAsB,GAAAtF,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAqC,SAAA,GAAArC,SAAA,MAAG,IAAI;MAClD,IAAI,CAAC7D,cAAc,GAAGK,GAAG;MACzB,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,EAAE;QAClC,IAAI,CAACN,WAAW,KAAK,IAAI,CAACA,WAAW,CAACkJ,SAAS,GAAG,KAAK,CAAC;QACxD,IAAI,CAAClJ,WAAW,GAAG,IAAI;QACvB;MACN;MACI,IAAM2B,IAAI,GAAG,IAAI,CAACyC,OAAO,CAAC9D,GAAG,CAAC;MAC9B,IAAIqB,IAAI,EAAE;QACR,IAAI,CAACqH,cAAc,CAACrH,IAAI,CAAC;QACzB,IAAIyH,sBAAsB,IAAI,IAAI,CAACpJ,WAAW,CAAC0H,KAAK,GAAG,CAAC,EAAE;UACxD,IAAI,CAAC1H,WAAW,CAAC0E,MAAM,CAAChB,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;QAClD;MACA;IACA;EAAG;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}