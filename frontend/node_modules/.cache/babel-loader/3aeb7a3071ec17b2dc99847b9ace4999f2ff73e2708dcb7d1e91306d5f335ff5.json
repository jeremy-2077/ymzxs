{"ast":null,"code":"import _objectSpread from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeremiahncross/Documents/code/ymzxs/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport axios from 'axios';\nexport default {\n  name: 'LoginPage',\n  data: function data() {\n    var _this = this;\n    // 验证密码一致性\n    var validatePass = function validatePass(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请确认密码'));\n      } else if (value !== _this.registerForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n\n    // 验证邮箱是否符合学校域名\n    var validateEmail = function validateEmail(rule, value, callback) {\n      if (!value) {\n        callback(new Error('请输入邮箱'));\n      } else if (!value.endsWith('edu.cn')) {\n        callback(new Error('请使用学校邮箱注册 (@xxx.edu.cn)'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      activeTab: 'login',\n      loading: false,\n      registerLoading: false,\n      // 登录表单\n      loginForm: {\n        email: '',\n        password: ''\n      },\n      loginRules: {\n        email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱格式',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度至少6个字符',\n          trigger: 'blur'\n        }]\n      },\n      // 注册表单\n      registerForm: {\n        name: '',\n        email: '',\n        studentId: '',\n        password: '',\n        confirmPassword: '',\n        role: 'student'\n      },\n      registerRules: {\n        name: [{\n          required: true,\n          message: '请输入姓名',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱格式',\n          trigger: 'blur'\n        }, {\n          validator: validateEmail,\n          trigger: 'blur'\n        }],\n        studentId: [\n          // { required: true, message: '请输入学号', trigger: 'blur' }\n        ],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度至少6个字符',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请确认密码',\n          trigger: 'blur'\n        }, {\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        role: [{\n          required: true,\n          message: '请选择角色',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 处理登录\n    handleLogin: function handleLogin() {\n      var _this2 = this;\n      this.$refs.loginFormRef.validate(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(valid) {\n          var response, _response$data, user, token, errorMessage;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (valid) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                _this2.loading = true;\n                _context.prev = 3;\n                _context.next = 6;\n                return axios.post('/api/auth/login', {\n                  email: _this2.loginForm.email,\n                  password: _this2.loginForm.password\n                });\n              case 6:\n                response = _context.sent;\n                // 正确解构 access_token 并重命名为 token\n                _response$data = response.data, user = _response$data.user, token = _response$data.access_token;\n                if (token) {\n                  _context.next = 13;\n                  break;\n                }\n                console.error('Login successful but no token received!', response.data);\n                _this2.$message.error('登录失败：未收到认证令牌');\n                _this2.loading = false;\n                return _context.abrupt(\"return\");\n              case 13:\n                _this2.$store.dispatch('login', {\n                  user: user,\n                  token: token\n                });\n                if (user && user.role) {\n                  _this2.$router.push(user.role === 'admin' ? '/admin/dashboard' : '/student/dashboard');\n                  _this2.$message.success('登录成功');\n                } else {\n                  console.error('登录成功，但用户信息不完整:', user);\n                  _this2.$message.warning('登录成功，但无法确定用户角色，将跳转至首页');\n                  _this2.$router.push('/');\n                }\n                _context.next = 23;\n                break;\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](3);\n                console.error('登录失败:', _context.t0);\n                errorMessage = '登录失败，请检查邮箱和密码';\n                if (_context.t0.response && _context.t0.response.data && (_context.t0.response.data.message || _context.t0.response.data.error)) {\n                  errorMessage = _context.t0.response.data.message || _context.t0.response.data.error;\n                }\n                _this2.$message.error(errorMessage);\n              case 23:\n                _context.prev = 23;\n                _this2.loading = false;\n                return _context.finish(23);\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[3, 17, 23, 26]]);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 处理注册\n    handleRegister: function handleRegister() {\n      var _this3 = this;\n      this.$refs.registerFormRef.validate(/*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(valid) {\n          var payload, response, responseData, errorMessage;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (valid) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 2:\n                if (!(_this3.registerForm.role === 'admin')) {\n                  _context2.next = 5;\n                  break;\n                }\n                _this3.$message.warning('不允许直接注册管理员账号');\n                return _context2.abrupt(\"return\");\n              case 5:\n                _this3.registerLoading = true; // 使用独立的 loading 状态\n                _context2.prev = 6;\n                // 调用注册API\n                payload = _objectSpread({\n                  name: _this3.registerForm.name,\n                  email: _this3.registerForm.email,\n                  password: _this3.registerForm.password,\n                  role: _this3.registerForm.role\n                }, _this3.registerForm.studentId && {\n                  student_id: _this3.registerForm.studentId\n                });\n                console.log('注册信息 (Login.vue):', payload); // 确认发送的数据\n                _context2.next = 11;\n                return axios.post('/api/auth/register', payload);\n              case 11:\n                response = _context2.sent;\n                // 处理成功响应\n                responseData = response.data || {};\n                _this3.$message.success(responseData.message || '注册成功！请返回登录');\n                _this3.activeTab = 'login'; // 切换回登录 Tab\n                // 可选：清空注册表单\n                // this.$refs.registerFormRef.resetFields();\n                _context2.next = 23;\n                break;\n              case 17:\n                _context2.prev = 17;\n                _context2.t0 = _context2[\"catch\"](6);\n                console.error('注册失败 (Login.vue):', _context2.t0);\n                errorMessage = '注册失败，请稍后重试';\n                if (_context2.t0.response && _context2.t0.response.data && _context2.t0.response.data.error) {\n                  errorMessage = _context2.t0.response.data.error; // 使用后端返回的 error 信息\n                }\n                _this3.$message.error(errorMessage);\n              case 23:\n                _context2.prev = 23;\n                _this3.registerLoading = false;\n                return _context2.finish(23);\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, null, [[6, 17, 23, 26]]);\n        }));\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","_this","validatePass","rule","value","callback","Error","registerForm","password","validateEmail","endsWith","activeTab","loading","registerLoading","loginForm","email","loginRules","required","message","trigger","type","min","studentId","confirmPassword","role","registerRules","validator","methods","handleLogin","_this2","$refs","loginFormRef","validate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","valid","response","_response$data","user","token","errorMessage","wrap","_callee$","_context","prev","next","abrupt","post","sent","access_token","console","error","$message","$store","dispatch","$router","push","success","warning","t0","finish","stop","_x","apply","arguments","handleRegister","_this3","registerFormRef","_ref2","_callee2","payload","responseData","_callee2$","_context2","_objectSpread","student_id","log","_x2"],"sources":["/Users/jeremiahncross/Documents/code/ymzxs/frontend/src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <el-card class=\"login-card\">\n      <div class=\"logo\">\n        <h1>自习室座位管理系统</h1>\n      </div>\n      \n      <el-tabs v-model=\"activeTab\">\n        <el-tab-pane label=\"登录\" name=\"login\">\n          <el-form :model=\"loginForm\" :rules=\"loginRules\" ref=\"loginFormRef\">\n            <el-form-item prop=\"email\" label=\"邮箱\">\n              <el-input v-model=\"loginForm.email\" prefix-icon=\"el-icon-user\" placeholder=\"请输入邮箱\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"password\" label=\"密码\">\n              <el-input v-model=\"loginForm.password\" prefix-icon=\"el-icon-lock\" placeholder=\"请输入密码\" show-password type=\"password\"></el-input>\n            </el-form-item>\n            <el-form-item>\n              <el-button type=\"primary\" class=\"login-button\" @click=\"handleLogin\" :loading=\"loading\">登录</el-button>\n            </el-form-item>\n          </el-form>\n        </el-tab-pane>\n        \n        <el-tab-pane label=\"注册\" name=\"register\">\n          <el-form :model=\"registerForm\" :rules=\"registerRules\" ref=\"registerFormRef\">\n            <el-form-item prop=\"name\" label=\"姓名\">\n              <el-input v-model=\"registerForm.name\" placeholder=\"请输入姓名\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"email\" label=\"学校邮箱\">\n              <el-input v-model=\"registerForm.email\" placeholder=\"请输入学校邮箱 (@xxx.edu.cn)\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"studentId\" label=\"学号\">\n              <el-input v-model=\"registerForm.studentId\" placeholder=\"请输入学号 (可选)\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"password\" label=\"密码\">\n              <el-input v-model=\"registerForm.password\" placeholder=\"请设置密码\" show-password type=\"password\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"confirmPassword\" label=\"确认密码\">\n              <el-input v-model=\"registerForm.confirmPassword\" placeholder=\"请确认密码\" show-password type=\"password\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"role\" label=\"角色\">\n              <el-radio-group v-model=\"registerForm.role\">\n                <el-radio value=\"student\">学生</el-radio>\n                <el-radio value=\"admin\">管理员</el-radio>\n              </el-radio-group>\n            </el-form-item>\n            <el-form-item>\n              <el-button type=\"primary\" class=\"register-button\" @click=\"handleRegister\" :loading=\"registerLoading\">注册</el-button>\n            </el-form-item>\n          </el-form>\n        </el-tab-pane>\n      </el-tabs>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'LoginPage',\n  data() {\n    // 验证密码一致性\n    const validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请确认密码'));\n      } else if (value !== this.registerForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    \n    // 验证邮箱是否符合学校域名\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请输入邮箱'));\n      } else if (!value.endsWith('edu.cn')) {\n        callback(new Error('请使用学校邮箱注册 (@xxx.edu.cn)'));\n      } else {\n        callback();\n      }\n    };\n    \n    return {\n      activeTab: 'login',\n      loading: false,\n      registerLoading: false,\n      \n      // 登录表单\n      loginForm: {\n        email: '',\n        password: ''\n      },\n      loginRules: {\n        email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          { min: 6, message: '密码长度至少6个字符', trigger: 'blur' }\n        ]\n      },\n      \n      // 注册表单\n      registerForm: {\n        name: '',\n        email: '',\n        studentId: '',\n        password: '',\n        confirmPassword: '',\n        role: 'student'\n      },\n      registerRules: {\n        name: [\n          { required: true, message: '请输入姓名', trigger: 'blur' }\n        ],\n        email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' },\n          { validator: validateEmail, trigger: 'blur' }\n        ],\n        studentId: [\n          // { required: true, message: '请输入学号', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          { min: 6, message: '密码长度至少6个字符', trigger: 'blur' }\n        ],\n        confirmPassword: [\n          { required: true, message: '请确认密码', trigger: 'blur' },\n          { validator: validatePass, trigger: 'blur' }\n        ],\n        role: [\n          { required: true, message: '请选择角色', trigger: 'change' }\n        ]\n      },\n    };\n  },\n  methods: {\n    // 处理登录\n    handleLogin() {\n      this.$refs.loginFormRef.validate(async (valid) => {\n        if (!valid) return;\n        this.loading = true;\n        try {\n          const response = await axios.post('/api/auth/login', {\n            email: this.loginForm.email,\n            password: this.loginForm.password\n          });\n          // 正确解构 access_token 并重命名为 token\n          const { user, access_token: token } = response.data; \n          \n          if (!token) {\n             console.error('Login successful but no token received!', response.data);\n             this.$message.error('登录失败：未收到认证令牌');\n             this.loading = false;\n             return;\n          }\n\n          this.$store.dispatch('login', { user, token });\n          \n          if (user && user.role) {\n            this.$router.push(user.role === 'admin' ? '/admin/dashboard' : '/student/dashboard');\n            this.$message.success('登录成功');\n          } else {\n            console.error('登录成功，但用户信息不完整:', user);\n            this.$message.warning('登录成功，但无法确定用户角色，将跳转至首页');\n            this.$router.push('/'); \n          }\n        } catch (error) {\n          console.error('登录失败:', error);\n          let errorMessage = '登录失败，请检查邮箱和密码';\n          if (error.response && error.response.data && (error.response.data.message || error.response.data.error) ) {\n            errorMessage = error.response.data.message || error.response.data.error; \n          }\n          this.$message.error(errorMessage);\n        } finally {\n          this.loading = false;\n        }\n      });\n    },\n    \n    // 处理注册\n    handleRegister() {\n      this.$refs.registerFormRef.validate(async (valid) => {\n        if (!valid) return;\n        \n        // 简单处理：不允许直接注册 admin，如果需要，应由后端或管理界面处理\n        if (this.registerForm.role === 'admin') {\n            this.$message.warning('不允许直接注册管理员账号');\n            return;\n        }\n        \n        this.registerLoading = true; // 使用独立的 loading 状态\n        \n        try {\n          // 调用注册API\n          const payload = {\n            name: this.registerForm.name,\n            email: this.registerForm.email,\n            password: this.registerForm.password,\n            role: this.registerForm.role, // 发送选择的角色 (虽然上面限制了admin)\n            // 如果学号填写了才发送\n            ...(this.registerForm.studentId && { student_id: this.registerForm.studentId })\n          };\n          console.log('注册信息 (Login.vue):', payload); // 确认发送的数据\n          \n          const response = await axios.post('/api/auth/register', payload);\n          \n          // 处理成功响应\n          const responseData = response.data || {};\n          this.$message.success(responseData.message || '注册成功！请返回登录');\n          this.activeTab = 'login'; // 切换回登录 Tab\n          // 可选：清空注册表单\n          // this.$refs.registerFormRef.resetFields();\n          \n        } catch (error) {\n          console.error('注册失败 (Login.vue):', error);\n          let errorMessage = '注册失败，请稍后重试';\n          if (error.response && error.response.data && error.response.data.error) {\n            errorMessage = error.response.data.error; // 使用后端返回的 error 信息\n          }\n          this.$message.error(errorMessage);\n        } finally {\n          this.registerLoading = false;\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #f5f7fa;\n}\n\n.login-card {\n  width: 450px;\n  padding: 20px 0;\n}\n\n.logo {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.login-button, .register-button {\n  width: 100%;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}